---
- hosts: localhost
  become: no
  gather_facts: no

  tasks: 

    - name: Delete VM ssh fingerprint
      become: false
      shell: "ssh-keygen -f ~/.ssh/known_hosts -R {{ hostvars[item]['ansible_host'] }}"
      register: known_hosts_delete
      changed_when: "'updated' in known_hosts_delete.stdout"
      loop: "{{ groups['all'] }}"

    - name: Accept server SSH host keys
      become: false
      shell: |
        ssh-keyscan -H {{ hostvars[item]['ansible_host'] }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      until: known_hosts_script.rc == 0
      retries: 5
      delay: 1
      changed_when: known_hosts_script.rc != 0
      loop: "{{ groups['all'] }}"

 
- hosts: all
  become: yes
  gather_facts: yes
  
  pre_tasks:
     
    - name: Disable cloud-init
      lineinfile:
        path: /etc/cloud/cloud-init.disabled
        line: cloud-init=disabled
        create: yes
        state: present

    - name: Print ip address of VW
      debug:
        var:  hostvars[item]['ansible_eth1']['ipv4']['address']
      loop: "{{ groups['all'] }}"
  
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes

    - name: Find timezone
      command: timedatectl 
      register: timedate_output
      changed_when: false

    - name: Set time zone
      command: timedatectl set-timezone Europe/Moscow
      when: '"Moscow" not in timedate_output.stdout'

    - name: Fill /etc/hosts with hosts entry
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_host'] }}  {{ item }}"
      loop: "{{ groups['all'] }}"

  roles:
    - { role: ansible-ntp-master }

- hosts: postgres_instances
  become: yes
  gather_facts: yes
  serial: 1

  roles:
    - { role: geerlingguy.postgresql }

- hosts: etcds
  become: yes
  gather_facts: yes

  roles:
    - { role: igor_nikiforov.etcd }

- hosts: haproxys
  become: yes
  gather_facts: yes

  roles:
    - { role: uoi-io.haproxy }

- hosts: postgres-1 
  become: yes
  gather_facts: yes

  roles:
    - { role: patroni }

  post_tasks:

    - name: Wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false

    - name: Wait for port 5432 to become open on the host
      wait_for:
        port: 5432
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false
 
    - name: Wait for the cluster to initialize (master is the leader with the lock)
      uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/leader"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 10
      delay: 2

- hosts: postgres-2 
  become: yes
  gather_facts: yes

  roles:
    - { role: patroni }

  post_tasks:

    - name: Wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false
 
    - name: Check that the patroni is healthy on the replica server
      uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/health"
        status_code: 200
      register: replica_result
      until: replica_result.status == 200
      retries: 30 # timeout 10 hours
      delay: 30


